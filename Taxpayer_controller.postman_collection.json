{
	"info": {
		"_postman_id": "de44a842-c210-4fdc-be97-a1dfc61e4d25",
		"name": "Taxpayer_controller",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "Taxpayer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tin\": [\r\n    \"{{taxPayerTin1}}\"\r\n  ],\r\n  \"taxpayerVoen\": \"string\",\r\n  \"taxpayerTypes\": [\r\n    \"INDIVIDUAL\"\r\n  ],\r\n  \"taxpayerStatuses\": [\r\n    \"ACTIVE\"\r\n  ],\r\n  \"registrationPeriodStart\": \"2021-09-23\",\r\n  \"registrationPeriodEnd\": \"2021-09-23\",\r\n  \"outstandingPaymentToBudgetMin\": 0,\r\n  \"outstandingPaymentToBudgetMax\": 0,\r\n  \"objectCode\": \"string\",\r\n  \"vatRegistrationPeriodStart\": \"2021-09-23\",\r\n  \"vatRegistrationPeriodEnd\": \"2021-09-23\",\r\n  \"activityTypes\": [\r\n    \"string\"\r\n  ],\r\n  \"familyFarmEnum\": \"YES\",\r\n  \"landOwner\": \"YES\",\r\n  \"cashInconsistencies\": \"YES\",\r\n  \"fineDebtAmountMin\": 0,\r\n  \"fineDebtAmountMax\": 0,\r\n  \"overpaymentAmountMin\": 0,\r\n  \"overpaymentAmountMax\": 0,\r\n  \"foundations\": [\r\n    \"TAXES\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - similar-taxpayers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tin\": [\r\n    \"{{taxPayerId2}}\"\r\n  ],\r\n  \"taxpayerVoen\": \"string\",\r\n  \"taxpayerTypes\": [\r\n    \"INDIVIDUAL\"\r\n  ],\r\n  \"taxpayerStatuses\": [\r\n    \"ACTIVE\"\r\n  ],\r\n  \"registrationPeriodStart\": \"2021-09-23\",\r\n  \"registrationPeriodEnd\": \"2021-09-23\",\r\n  \"outstandingPaymentToBudgetMin\": 0,\r\n  \"outstandingPaymentToBudgetMax\": 0,\r\n  \"objectCode\": \"string\",\r\n  \"vatRegistrationPeriodStart\": \"2021-09-23\",\r\n  \"vatRegistrationPeriodEnd\": \"2021-09-23\",\r\n  \"activityTypes\": [\r\n    \"string\"\r\n  ],\r\n  \"familyFarmEnum\": \"YES\",\r\n  \"landOwner\": \"YES\",\r\n  \"cashInconsistencies\": \"YES\",\r\n  \"fineDebtAmountMin\": 0,\r\n  \"fineDebtAmountMax\": 0,\r\n  \"overpaymentAmountMin\": 0,\r\n  \"overpaymentAmountMax\": 0,\r\n  \"foundations\": [\r\n    \"TAXES\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/similar-taxpayers",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"similar-taxpayers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - payer-info-opt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tin\": \"{{taxPayerTin4}}\",\r\n  \"isDeclParam\": \"string\",\r\n  \"termDate\": \"string\",\r\n  \"ownerOid\": \"string\",\r\n  \"ownerType\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/payer-info-opt",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"payer-info-opt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - e-invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"invoiceSerial\": \"string\",\r\n  \"invoiceNumber\": \"string\",\r\n  \"tin\": \"{{taxPayerTin3}}\",\r\n  \"tinOrPinOrFullName\": \"string\",\r\n  \"minAmount\": 0,\r\n  \"maxAmount\": 0,\r\n  \"invoiceTypes\": [\r\n    \"_1\"\r\n  ],\r\n  \"invoiceDateStart\": \"2021-09-23\",\r\n  \"invoiceDateEnd\": \"2021-09-23\",\r\n  \"invoicePeriod\": \"string\",\r\n  \"offset\": 0,\r\n  \"maxCount\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/e-invoices",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"e-invoices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - e-invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"invoiceSerial\": \"string\",\r\n  \"invoiceNumber\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/e-invoice",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"e-invoice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - activities-by-date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Activity code is the same\", function () {\r",
									"    var jsonArrayData = pm.response.json();\r",
									"    pm.expect(jsonArrayData[0].activityCode).to.eql(\"6110101\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tin\": \"{{taxPayerTin1}}\",\r\n  \"startDate\": \"string\",\r\n  \"endDate\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/activities-by-date",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"activities-by-date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - tin-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//pm.test(\"Get Taxpayer ID\", function () {\r",
									"  //var jsonData = pm.response.json();\r",
									"  //pm.environment.set(\"taxPayerId3\", jsonData.taxPayerId);\r",
									"//});\r",
									"\r",
									"pm.test(\"Response ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxPayerId).to.eql(pm.environment.get('taxPayerId3'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/tin-info/{{taxPayerTin3}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"tin-info",
								"{{taxPayerTin3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - summary info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Response has field VAT Registration Date\"] = responseBody.has(\"vatRegDate\");\r",
									"tests[\"Response has field Payer Registration Date\"] = responseBody.has(\"payerRegDate\");\r",
									"tests[\"Response has field Count Of NKA\"] = responseBody.has(\"countOfNKA\");\r",
									"tests[\"Response has field Count Of Objects\"] = responseBody.has(\"countOfObjects\");\r",
									"\r",
									"pm.test(\"Response has correct Payer Registration Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.payerRegDate).to.eql(\"2021-03-04\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/summary-info/{{taxPayerTin2}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"summary-info",
								"{{taxPayerTin2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - panel-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//pm.test(\"Get Taxpayer TIN\", function () {\r",
									"  //var jsonData = pm.response.json();\r",
									"  //pm.environment.set(\"taxPayerTin1\", jsonData.tin);\r",
									"//});\r",
									"\r",
									"pm.test(\"Response has valid texPayer TIN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tin).to.eql(pm.environment.get(\"taxPayerTin1\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/panel-info/{{taxPayerId1}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"panel-info",
								"{{taxPayerId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - land-ownership",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Registry Number is correct\", function () {\r",
									"    var jsonArrayData = pm.response.json();\r",
									"    pm.expect(jsonArrayData[0].registryNumber).to.eql(\"63243\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/land-ownership/{{taxPayerId4}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"land-ownership",
								"{{taxPayerId4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has Tax Payers Full Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.fullName).to.eql(\"HÜSEYNOVA LALƏ MÖHSÜM QIZI\");\r",
									"});\r",
									"pm.test(\"Response has matching TIN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tin).to.eql(pm.environment.get(\"taxPayerTin2\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/info/{{taxPayerId2}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"info",
								"{{taxPayerId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - fonds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string TAXES\", function () {\r",
									"    pm.expect(pm.response.text()).to.include([\"TAXES\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}​/v1​/public​/taxpayer​/fonds",
							"host": [
								"{{server_url}}​"
							],
							"path": [
								"v1​",
								"public​",
								"taxpayer​",
								"fonds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - family-farm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Response has field Municipal Document Number\"] = responseBody.has(\"municipalDocumentNumber\");\r",
									"tests[\"Response has field Date Of Municipal Document\"] = responseBody.has(\"dateOfMunicipalDocument\");\r",
									"\r",
									"pm.test(\"Full Name is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ELÇİN BƏKİROV İSRAYIL OĞLU\");\r",
									"});\r",
									"\r",
									"pm.test(\"Municipal Document Number is correct\", function () {\r",
									"    var jsonArrayData = pm.response.json();\r",
									"    pm.expect(jsonArrayData.familyFarms[0].municipalDocumentNumber).to.eql(\"RN7799\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/family-farm/{{taxPayerId2}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"family-farm",
								"{{taxPayerId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - debt-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response value is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.frozenDebtInfoResponseModel).to.eql(null);\r",
									"})\r",
									"pm.test(\"Response value is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.toBeObtainedDebtInfoResponseModel).to.eql(null);\r",
									"})\r",
									"\r",
									"tests[\"Response has field Frozen Debt\"] = responseBody.has(\"frozenDebtInfoResponseModel\");\r",
									"tests[\"Response has field To Be Obtained Debt\"] = responseBody.has(\"toBeObtainedDebtInfoResponseModel\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/debt-info/{{taxPayerTin3}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"debt-info",
								"{{taxPayerTin3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - check-tin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Full Name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxPayerFullName).to.eql(`\"ERTYU\" Məhdud Məsuliyyətli Cəmiyyəti`);\r",
									"});\r",
									"tests[\"Response has field Tax Payer Full Name\"] = responseBody.has(\"taxPayerFullName\");\r",
									"tests[\"Response has field Tax Payer Status\"] = responseBody.has(\"taxPayerStatus\");\r",
									"tests[\"Response has field Liquidation Date\"] = responseBody.has(\"liquidationDate\");\r",
									"tests[\"Response has field Pacts\"] = responseBody.has(\"pacts\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/check-tin/{{taxPayerTin1}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"check-tin",
								"{{taxPayerTin1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - basic-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Response has field TIN\"] = responseBody.has(\"tin\");\r",
									"tests[\"Response has field FIN\"] = responseBody.has(\"fin\");\r",
									"tests[\"Response has field Name\"] = responseBody.has(\"name\");\r",
									"\r",
									"pm.test(\"TIN number is correct\", function () {\r",
									"    var jsonArrayData = pm.response.json();\r",
									"    pm.expect(jsonArrayData[0].tin).to.eql(pm.environment.get(\"taxPayerTin1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/basic-info/{{taxPayerTin1}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"basic-info",
								"{{taxPayerTin1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"taxPayerId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/activity/{{taxPayerId1}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"activity",
								"{{taxPayerId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - activity/types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"taxPayerId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/activity/{{taxPayerId1}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"activity",
								"{{taxPayerId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Taxpayer - activity/basic-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Response has field Code\"] = responseBody.has(\"code\");\r",
									"tests[\"Response has field Name\"] = responseBody.has(\"name\");\r",
									"\r",
									"pm.test(\"Activity Type Code is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].code).to.eql(\"6110101\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/public/taxpayer/activity/basic-info/{{ActivityTypeCode_TP1}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"public",
								"taxpayer",
								"activity",
								"basic-info",
								"{{ActivityTypeCode_TP1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Negative with empty data",
					"item": [
						{
							"name": "Taxpayer - tin-info / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/tin-info/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"tin-info",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - summary info / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/summary-info/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"summary-info",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - panel-info / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/panel-info/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"panel-info",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - land-ownership / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/land-ownership/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"land-ownership",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - info / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/info/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"info",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - family-farm / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/family-farm/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"family-farm",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - debt-info / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/debt-info/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"debt-info",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - check-tin / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/check-tin/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"check-tin",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - basic-info / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/basic-info/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"basic-info",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - activity / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/activity/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"activity",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - activity/types / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/activity/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"activity",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - activity/basic-info / empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with empty empty data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/activity/basic-info/",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"activity",
										"basic-info",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative with incorrect data",
					"item": [
						{
							"name": "Taxpayer - tin-info / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/tin-info/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"tin-info",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - summary info / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/summary-info/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"summary-info",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - panel-info / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/panel-info/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"panel-info",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - land-ownership / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/land-ownership/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"land-ownership",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - info / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/info/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"info",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - has-payer-done-app-by-type / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Input incorrect data  - Result should be false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/has-payer-done-app-by-type/{{taxPayerTin2}}/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"has-payer-done-app-by-type",
										"{{taxPayerTin2}}",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - family-farm / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/family-farm/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"family-farm",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - debt-info / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/debt-info/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"debt-info",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - check-tin / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/check-tin/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"check-tin",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - basic-info / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect data is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/basic-info/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"basic-info",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - activity / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect activity code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/activity/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"activity",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - activity/types / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect Tax Payed ID is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/activity/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"activity",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Taxpayer - activity/basic-info / incorrect data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code with incorrect activity code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_url}}/v1/public/taxpayer/activity/basic-info/{{incorrectData}}",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"public",
										"taxpayer",
										"activity",
										"basic-info",
										"{{incorrectData}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}